services:
  # PostgreSQL Database with optimizations
  postgres:
    image: postgres:15-alpine
    container_name: gpw_postgres
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      # Performance optimizations
      POSTGRES_SHARED_BUFFERS: "256MB"
      POSTGRES_EFFECTIVE_CACHE_SIZE: "1GB"
      POSTGRES_MAINTENANCE_WORK_MEM: "64MB"
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: "0.9"
      POSTGRES_WAL_BUFFERS: "16MB"
      POSTGRES_DEFAULT_STATISTICS_TARGET: "100"
      POSTGRES_RANDOM_PAGE_COST: "1.1"
      POSTGRES_EFFECTIVE_IO_CONCURRENCY: "200"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Use new consolidated schema file
      - ./database-schema.sql:/docker-entrypoint-initdb.d/database-schema.sql:ro
      # Add custom postgresql.conf for optimizations
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "5432:5432"
    networks:
      - gpw_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Resource limits for stability
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis Cache with persistence and optimizations
  redis:
    image: redis:7-alpine
    container_name: gpw_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - gpw_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # GPW Investor Flask Application with optimizations
  gpw_app:
    build:
      context: .
      dockerfile: Dockerfile.optimized
      # Use BuildKit for faster builds
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: gpw_app
    restart: unless-stopped
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database Configuration
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      
      # Flask Configuration
      FLASK_ENV: ${FLASK_ENV}
      FLASK_DEBUG: ${FLASK_DEBUG}
      SECRET_KEY: ${SECRET_KEY}
      
      # Redis Configuration
      REDIS_URL: ${REDIS_URL}
      
      # Telegram Configuration
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_DEFAULT_CHAT_ID: ${TELEGRAM_DEFAULT_CHAT_ID}
      
      # Chrome/Selenium Configuration
      CHROME_BIN: /usr/bin/google-chrome
      DISPLAY: :99
      
      # Timezone
      TZ: ${TZ}
      
      # Python optimizations
      PYTHONHASHSEED: random
      PYTHONOPTIMIZE: 1
    ports:
      - "5000:5000"
    volumes:
      # Persist application data using Docker volumes (safer than bind mounts)
      - app_data:/app/data
      - app_logs:/app/logs
      - app_storage:/app/storage
      - app_models:/app/models
      # Optional: mount local development directories for development profile
      # - ./data:/app/data
      # - ./logs:/app/logs
    networks:
      - gpw_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/app/health"]
      interval: 30s
      timeout: 10s
      start_period: 40s
      retries: 3
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Nginx Reverse Proxy (optional for production)
  nginx:
    image: nginx:alpine
    container_name: gpw_nginx
    restart: unless-stopped
    depends_on:
      - gpw_app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # For SSL certificates
    networks:
      - gpw_network
    profiles:
      - production
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# Network Configuration
networks:
  gpw_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volume Configuration with optimizations  
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_data:
    driver: local
  app_logs:
    driver: local
  app_storage:
    driver: local
  app_models:
    driver: local

# Development override file would be docker-compose.override.yml
