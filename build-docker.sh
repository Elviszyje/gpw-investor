#!/bin/bash

# GPW Investor - Build Script with Dockerfile Selection
# Wybierz wersjƒô Dockerfile odpowiedniƒÖ dla Twojego przypadku u≈ºycia

set -e

echo "üöÄ GPW Investor - Docker Build Script"
echo "====================================="
echo ""

# Sprawd≈∫ czy Docker dzia≈Ça
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker nie jest zainstalowany lub nie dzia≈Ça"
    exit 1
fi

# Menu wyboru
echo "Wybierz wersjƒô do zbudowania:"
echo "1) Pe≈Çna wersja (z Chrome/Selenium) - zalecana dla web scrapingu"
echo "2) Uproszczona wersja (bez Chrome) - szybsza, mniejsza, do podstawowych funkcji"
echo "3) Automatyczny wyb√≥r na podstawie architektury"
echo ""
read -p "Tw√≥j wyb√≥r (1-3): " choice

case $choice in
    1)
        echo "üîß Budowanie pe≈Çnej wersji z Chrome/Selenium..."
        DOCKERFILE="Dockerfile"
        IMAGE_TAG="gpw_investor:full"
        ;;
    2)
        echo "üîß Budowanie uproszczonej wersji bez Chrome..."
        DOCKERFILE="Dockerfile.simple"
        IMAGE_TAG="gpw_investor:simple"
        ;;
    3)
        ARCH=$(uname -m)
        echo "üîç Wykryto architekturƒô: $ARCH"
        if [[ "$ARCH" == "x86_64" ]]; then
            echo "üîß Budowanie pe≈Çnej wersji dla x86_64..."
            DOCKERFILE="Dockerfile"
            IMAGE_TAG="gpw_investor:full"
        else
            echo "üîß Budowanie uproszczonej wersji dla $ARCH..."
            DOCKERFILE="Dockerfile.simple"
            IMAGE_TAG="gpw_investor:simple"
        fi
        ;;
    *)
        echo "‚ùå Nieprawid≈Çowy wyb√≥r"
        exit 1
        ;;
esac

echo ""
echo "üìã Szczeg√≥≈Çy budowania:"
echo "Dockerfile: $DOCKERFILE"
echo "Image tag: $IMAGE_TAG"
echo ""

# Sprawd≈∫ czy Dockerfile istnieje
if [ ! -f "$DOCKERFILE" ]; then
    echo "‚ùå Plik $DOCKERFILE nie istnieje!"
    exit 1
fi

# Budowanie
echo "üî® Rozpoczynam budowanie obrazu Docker..."
echo "To mo≈ºe potrwaƒá kilka minut..."
echo ""

if docker build -f "$DOCKERFILE" -t "$IMAGE_TAG" .; then
    echo ""
    echo "‚úÖ Obraz zbudowany pomy≈õlnie!"
    echo "üè∑Ô∏è  Tag: $IMAGE_TAG"
    echo ""
    
    # Sprawd≈∫ rozmiar obrazu
    SIZE=$(docker images "$IMAGE_TAG" --format "table {{.Size}}" | tail -n 1)
    echo "üìä Rozmiar obrazu: $SIZE"
    echo ""
    
    # Aktualizuj docker-compose.yml je≈õli u≈ºywamy uproszczonej wersji
    if [[ "$DOCKERFILE" == "Dockerfile.simple" ]]; then
        echo "‚ö†Ô∏è  UWAGA: U≈ºywasz uproszczonej wersji bez Chrome."
        echo "   Web scrapers z Selenium mogƒÖ nie dzia≈Çaƒá."
        echo "   Je≈õli potrzebujesz web scrapingu, u≈ºyj opcji 1."
        echo ""
        
        # Opcjonalnie zaktualizuj docker-compose.yml
        read -p "Czy zaktualizowaƒá docker-compose.yml dla uproszczonej wersji? (y/n): " update_compose
        if [[ "$update_compose" == "y" || "$update_compose" == "Y" ]]; then
            sed -i.bak 's/dockerfile: Dockerfile/dockerfile: Dockerfile.simple/' docker-compose.yml
            echo "‚úÖ docker-compose.yml zaktualizowany"
        fi
    fi
    
    echo "üöÄ Nastƒôpne kroki:"
    echo "1. Uruchom: docker-compose up -d"
    echo "2. Sprawd≈∫: curl http://localhost:5001/api/app/health"
    echo "3. Otw√≥rz: http://localhost:5001"
    
else
    echo ""
    echo "‚ùå B≈ÇƒÖd podczas budowania obrazu!"
    echo ""
    echo "üîß Mo≈ºliwe rozwiƒÖzania:"
    echo "1. Spr√≥buj uproszczonej wersji (opcja 2)"
    echo "2. Sprawd≈∫ po≈ÇƒÖczenie internetowe"
    echo "3. Wyczy≈õƒá cache Docker: docker system prune"
    echo "4. Sprawd≈∫ logi powy≈ºej dla szczeg√≥≈Ç√≥w b≈Çƒôdu"
    exit 1
fi
